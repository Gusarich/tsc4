{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

forall X -> tuple unsafe_tuple(X) asm "NOP";
int tlen(tuple) asm "TLEN";
tuple last(tuple) asm "LAST";
forall X -> X tat(tuple, int) asm "INDEXVAR";

tuple solve(tuple, tuple) asm """
    // A B
    OVER // A B A
    DUP2 // A B A B A
    4 SETGLOB // A B A B
    5 SETGLOB // A B A
    TLEN // A B n
    1 SETGLOB // A B
    FIRST // A B0
    TLEN // A p
    3 SETGLOB // A
    FIRST // A0
    TLEN // m
    2 SETGLOB //

    DUMPSTK

    ZERO // 0
    1 GETGLOB // 0 n
    REPEAT:<{
        // i
        ZERO // i j
        3 GETGLOB // i j p
        REPEAT:<{
            // i j
            ZERO // i j k
            ZERO // i j k s
            2 GETGLOB // i j k s m
            REPEAT:<{
                // i j k s
                4 GETGLOB // i j k s A
                s4 PUSH // i j k s A i
                INDEXVAR // i j k s Ai
                s2 PUSH // i j k s Ai k
                INDEXVAR // i j k s Aik
                5 GETGLOB // i j k s Aik B
                s3 PUSH // i j k s Aik B k
                INDEXVAR // i j k s Aik Bk
                s4 PUSH // i j k s Aik Bk j
                INDEXVAR // i j k s Aik Bkj
                MUL // i j k s Aik+Bkj
                ADD // i j k s
                SWAP // i j s k
                INC // i j s k
                SWAP // i j k s
            }>
            // i j k s
            s1 POP // i j s
            -ROT // s i j
            INC // s i j
        }>
        DROP // ... i
        INC // ... i
        6 SETGLOB // ...
        3 GETGLOB // ... p
        TUPLEVAR // tmp
        6 GETGLOB // tmp i
        DUMPSTK
    }>
    // ... i
    DROP // ...
    1 GETGLOB // ... n
    TUPLEVAR // result
""";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
    return solve(matrixA, matrixB);
}

() recv_internal() {
    ;; tuple a = unsafe_tuple([
    ;;     unsafe_tuple([1, 2, 3]),
    ;;     unsafe_tuple([4, 5, 6])
    ;; ]);
    ;; tuple b = unsafe_tuple([
    ;;     unsafe_tuple([7, 8]),
    ;;     unsafe_tuple([9, 10]),
    ;;     unsafe_tuple([11, 12])
    ;; ]);

    ;; ~dump(solve(a, b));
}