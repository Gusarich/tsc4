{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}

forall X -> tuple unsafe_tuple(X) asm "NOP";
int tlen(tuple) asm "TLEN";
forall X -> X tpop(tuple) asm "TPOP";
tuple last(tuple) asm "LAST";
forall X -> X tat(tuple, int) asm "INDEXVAR";
tuple reverse(tuple, int) asm """
    // t s
    UNTUPLEVAR // t0 t1 ... ts
    DEPTH // t0 t1 ... ts s
    ZERO // t0 t1 ... ts s 0
    REVX // ts ... t1 t0
    DEPTH // ts ... t1 t0 s
    TUPLEVAR // t
""";

;; testable
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
    tuple result = empty_tuple();

    int n = matrixA.tlen();
    int m = matrixA.last().tlen();
    int p = matrixB.last().tlen();

    repeat (n) {
        int j = 0;
        tuple tmp = empty_tuple();
        tuple Ai = matrixA~tpop();
        repeat (p) {
            int s = 0;
            tuple A = Ai;
            tuple B = matrixB;
            repeat (m) {
                s += A~tpop() * B~tpop().at(j);
            }
            tmp~tpush(s);
            j += 1;
        }
        result~tpush(tmp);
    }

    return reverse(result, n);
}

() recv_internal() {
    ;; ~dump(matrix_multiplier(
    ;;     unsafe_tuple([unsafe_tuple([1, 2, 3]),
    ;;                   unsafe_tuple([4, 5, 6])]),
    ;;     unsafe_tuple([unsafe_tuple([7, 8]),
    ;;                   unsafe_tuple([9, 10]),
    ;;                   unsafe_tuple([11, 12])])
    ;; ));
}