{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

int ubitsize(int) asm "UBITSIZE";
int test_builder(builder, int) asm "BCHKBITSQ";

(slice, (int, int)) load_tail(slice s, int l) inline {
    int x = s.slice_bits();
    if (x >= l) {
        int w = s~load_uint(l);
        return (s, (w, l));
    }
    if (s.slice_empty?()) {
        return (s, (0, 0));
    }
    if (s.slice_refs_empty?()) {
        int w = s~load_uint(x);
        return (s, (w, x));
    }
    int y = s.preload_uint(x);
    s = s.preload_ref().begin_parse();
    (int z, int w) = s~load_tail(l - x);
    return (s, ((y << w) + z, x + w));
}

(tuple, builder) write(tuple res, builder cur, int val, int szv) inline {
    if (cur.test_builder(szv)) {
        return (res, cur.store_uint(val, szv));
    }
    return (cons(cur, res), begin_cell().store_uint(val, szv));
}

int pow2dec(int x) inline asm "DEC POW2 DUP DEC ADD";

int pfx(int x, int l, int n) inline asm """
    // x l n
    SUB // x l-n
    RSHIFT // x>>(l-n)
""";

int sfx(int x, int n) inline asm """
    // x n
    DUP // x n n
    IF:<{
        DEC // x n-1
        POW2 // x 1<<(n-1)
        DUP // x 1<<(n-1) 1<<(n-1)
        DEC // x 1<<(n-1) 1<<(n-1)-1
        ADD // x (1<<n)-1
        AND // x&((1<<n)-1)
    }>ELSE<{
        DROP2
        ZERO
    }>
""";

int substr(int x, int l, int a, int b) inline asm """
    // pfx(sfx(x, l - a), l - a, b - a)
    // x l a b

    s2 s1 PUSH2 // x l a b l a
    SUB // x l a b l-a
    s1 s4 XCHG // b l a x l-a
        DEC // x n-1
        POW2 // x 1<<(n-1)
        DUP // x 1<<(n-1) 1<<(n-1)
        DEC // x 1<<(n-1) 1<<(n-1)-1
        ADD // x (1<<n)-1
        AND // x&((1<<n)-1)
    // b l a sfx
    s2 s1 XCPU // b sfx a l a
    SUB // b sfx a l-a
    s3 s3 XCHG2 // l-a sfx b a
    SUB // l-a sfx b-a
    s1 s2 XCHG // sfx l-a b-a
        SUB // x l-n
        RSHIFT // x>>(l-n)
""";

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
    slice s = linked_list.begin_parse();

    int sz = ubitsize(flag);
    int szv = ubitsize(value);

    tuple res = null();
    builder cur = begin_cell();

    (int x, int w) = s~load_tail(256);
    while (w >= sz) {
        int i = 0;
        int last = 0;
        int e = min(128, w - sz);
        while (i <= e) {
            int y = substr(x, w, i, i + sz);
            if (y == flag) {
                (res, cur) = write(res, cur, (substr(x, w, last, i) << szv) + value, (i - last) + szv);
                i += sz;
                last = i;
            } else {
                i += 1;
            }
        }

        if (last < i) {
            (res, cur) = write(res, cur, substr(x, w, last, i), i - last);
        }
        (int x', int w') = s~load_tail(i);
        x = (sfx(x, w - i) << w') + x';
        w = (w - i) + w';
    }

    (res, cur) = write(res, cur, x, w);

    while (~ null?(res)) {
        cur = (res~list_next()).store_ref(cur.end_cell());
    }

    return cur.end_cell();
}

() recv_internal() {
}