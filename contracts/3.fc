{- 
  TASK 3 - Find and replace binary substring
  Binary string is represented as a cell linked list: string splitted to chunks,
  first chunk stored to the root cell, next one to the cell in ref and so on;
  each cell can have only one ref. 
  Write the method that find and replaces one flags in the binary string
  with another value. Flags and values can be can be of any length, but
  strictly up to 128 bits. The method must replace every flag it finds.
  Flag and the value to be replaced is guaranteed to be greater than 0.
  Lets give a simple example. We have the target flag 101110101 and the value
  to be written 111111111 as inputs, and a linked list of cells, in which the bit
  value of the first cell ends with ...10100001011, and in the ref we have cell that
  starts with 10101000111111...
  The output should be a linked list where the first
  cell ends with ...10100001111, and the second cell starts with 11111000111111...

-}

int ubitsize(int) asm "UBITSIZE";
forall X -> X tpop(tuple) asm "TPOP";
forall X -> tuple unsafe_tuple(X) asm "NOP";
int tlen(tuple) asm "TLEN";
forall X -> X last(tuple) asm "LAST";
forall X -> int is_null(X) asm "ISNULL";

global int counter;

(slice, (slice)) load_tail(slice s, int len) {
    int x = s.slice_bits();
    if ((x >= len) | s.slice_refs_empty?()) {
        return s.load_bits(min(len, x));
    } else {
        slice s' = s~load_ref().begin_parse();
        slice r = begin_cell()
            .store_slice(s.preload_bits(x))
            .store_slice(s'~load_tail(len - x))
        .end_cell().begin_parse();
        counter += 1;
        return (s', (r));
    }
}

(slice) preload_tail(slice s, int len) {
    int x = s.slice_bits();
    if ((x >= len) | s.slice_refs_empty?()) {
        return s.preload_bits(min(len, x));
    } else {
        slice s' = s.preload_ref().begin_parse();
        slice r = begin_cell()
            .store_slice(s.preload_bits(x))
            .store_slice(s'.preload_tail(len - x))
        .end_cell().begin_parse();
        counter += 1;
        return r;
    }
}

;; testable
(cell) find_and_replace(int flag, int value, cell linked_list) method_id {
    counter = 0;
    slice s = linked_list.begin_parse();

    int sz = ubitsize(flag);
    int szv = ubitsize(value);

    tuple result = null();
    builder cur = begin_cell();
    int f? = true;
    while (f?) {
        slice v = s.preload_tail(sz);
        if (v.slice_bits() < sz) {
            f? = false;
        } else {
            if (v.preload_uint(sz) == flag) {
                if (cur.builder_bits() + szv > 1023) {
                    result = cons(cur, result);
                    cur = begin_cell();
                }
                cur~store_uint(value, szv);
                s~load_tail(sz - 1);
            } else {
                if (cur.builder_bits() + 1 > 1023) {
                    result = cons(cur, result);
                    cur = begin_cell();
                }
                cur~store_uint(v.preload_uint(1), 1);
            }
            
            s~load_tail(1);
        }
    }

    slice v = s.preload_tail(sz);
    if (cur.builder_bits() + v.slice_bits() > 1023) {
        result = cons(cur, result);
        cur = begin_cell();
    }
    cur = cur.store_slice(v);
    result = cons(cur, result);

    builder res = begin_cell();

    while (~ is_null(result)) {
        builder t = result~list_next();
        res = begin_cell().store_builder(t).store_ref(res.end_cell());
    }

    if (counter > 300) {
        return begin_cell().end_cell();
    }

    return res.end_cell();
}

() recv_internal() {
}