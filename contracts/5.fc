{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

tuple solve(int n, int k) asm """
    // n k
    DUP // n k k
    IFNOTJMP:<{
        // n k
        DROP2 //
        NIL // t
    }>
    1 SETGLOB // n
    
    0 1 { 2dup + } 368 times
    dictnew 368
    {
        // ... a b D i
        2swap // ... D i a b
        over // ... D i a b a
        <{ // ... D i a b a B
            swap // ... D i a b B a
            PUSHINT // ... D i a b B
            swap // ... D i a B b
            PUSHINT // ... D i a B
            {
                DUP2 ADD // ... D i a B
            } // ... D i a B e
            369 // ... D i a B e 369
            4 pick // ... D i a B e 369 i
            - // ... D i a B e 369-i
            255 // ... D i a B e 369-i 255
            min // ... D i a B e min(369-i,255)
            times // ... D i a B
        }>s // ... D i a v
        2swap // ... a v D i
        dup // ... a v D i i
        4 -roll // ... i a v D i
        swap // ... i a v i D
        9 // ... i a v i D 9
        udict! // ... i a D ?
        drop // ... i a D
        rot // ... a D i
        1 - // ... a D i-1
    } 369 times
    drop swap drop // D
    PUSHREF // n D
    9 PUSHINT // n D 9
    DICTUGETEXEC // ...
    DUMPSTK
    1 GETGLOB // ... k
    ONLYX // ...
    DEPTH // ... k
    TUPLEVAR // ... t
    1 RETARGS
""";

;; testable
tuple fibonacci_sequence(int n, int k) method_id {
    return solve(n, k);
}
