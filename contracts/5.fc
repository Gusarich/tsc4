{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

tuple solve(int n, int k) asm """
    // n k
    DUP // n k k
    IFNOTJMP:<{
        // n k
        DROP2 //
        NIL // t
    }>
    // n k
    DEC // n k-1
    0 1 { 2dup + } 368 times
    dictnew 368
    {
        // ... a b D i
        2swap // ... D i a b
        over // ... D i a b a
        <b swap 256 u, swap 256 u, b> <s // ... D i a v
        2swap // ... a v D i
        dup // ... a v D i i
        4 -roll // ... i a v D i
        swap // ... i a v i D
        9 // ... i a v i D 9
        udict! // ... i a D ?
        drop // ... i a D
        rot // ... a D i
        1 - // ... a D i-1
    } 369 times
    drop swap drop
    PUSHREF // n k-1 D
    s1 s2 XCHG // k-1 n D
    9 PUSHINT // k-1 n D 9
    DICTUGET // k-1 v ?
    DROP // k-1 v
    256 LDU // k-1 a v
    ROT // a v k-1
    DUP // a v k-1 k-1
    IFNOTJMP:<{
        // a v k-1
        DROP2 // a
        SINGLE // t
    }>
    DEC // a v k-2
    -ROT // k-2 a v
    256 LDU // k-2 a b v
    DROP // k-2 a b
    ROT // a b k-2
    REPEAT:<{
        // [...] a b
        DUP2 // [...] a b a b
        ADD // [...] a b c
    }>
    DEPTH // [...] k
    TUPLEVAR // t
""";

;; testable
tuple fibonacci_sequence(int n, int k) method_id {
    return solve(n, k);
}

