{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
(tuple, (builder)) tpop(tuple t) asm "TPOP";
forall X -> X last(tuple) asm "LAST";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    builder b = begin_cell();
    tuple result = empty_tuple();
    slice s = text.begin_parse();
    while (~ s.slice_data_empty?()) {
        int x = s~load_uint(8);
        if (x < 90) {
            x = (x - 65 + shift) % 26 + 65;
        } else {
            x = (x - 97 + shift) % 26 + 97;
        }
        b~store_uint(x, 8);
    }
    result~tpush(b);
    while (~ s.slice_empty?()) {
        while (~ s.slice_data_empty?()) {
            int x = s~load_uint(8);
            if (x < 90) {
                x = (x - 65 + shift) % 26 + 65;
            } else {
                x = (x - 97 + shift) % 26 + 97;
            }
            b~store_uint(x, 8);
        }
        s = s~load_ref().begin_parse();
        result~tpush(b);
        b = begin_cell();
    }
    b = result~tpop();
    repeat (result.tlen() - 1) {
        b = begin_cell().store_builder(result~tpop()).store_ref(b.end_cell());
    }
    return b.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    builder b = begin_cell();
    tuple result = empty_tuple();
    slice s = text.begin_parse();
    while (~ s.slice_data_empty?()) {
        int x = s~load_uint(8);
        if (x < 90) {
            x = (x - 65 - shift + 26) % 26 + 65;
        } else {
            x = (x - 97 - shift + 26) % 26 + 97;
        }
        b~store_uint(x, 8);
    }
    result~tpush(b);
    while (~ s.slice_empty?()) {
        while (~ s.slice_data_empty?()) {
            int x = s~load_uint(8);
            if (x < 90) {
                x = (x - 65 - shift + 26) % 26 + 65;
            } else {
                x = (x - 97 - shift + 26) % 26 + 97;
            }
            b~store_uint(x, 8);
        }
        s = s~load_ref().begin_parse();
        result~tpush(b);
        b = begin_cell();
    }
    b = result~tpop();
    repeat (result.tlen() - 1) {
        b = begin_cell().store_builder(result~tpop()).store_ref(b.end_cell());
    }
    return b.end_cell();
}

