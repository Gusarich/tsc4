{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption andecryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encryptein a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters anthe last ASCII
  character shoulgo to the beginning. Return new text encodein cell.
-}

() recv_internal() {
}

int f(int) asm """
    // x
    1 GETGLOB // x D
    8 PUSHINT // x D 8
    DICTUGET // s ?
    DROP // s
    8 LDU // x s
    DROP // x
""";

() help(int) impure asm """
    // d
    B{} B>boc PUSHREF
    // d D
    5 PUSHINT // d D 5
    DICTUGETREF // c ?
    DROP // c
    1 SETGLOB //
""";

(builder) store_caesar(slice s) {
    builder b = begin_cell();
    repeat (s.slice_bits() / 8) {
        int x = s~load_uint(8);
        ;; if ((x >= 65) & (x <= 90)) {
        ;;     x = (x + d + 13) % 26 + 65;
        ;; } elseif ((x >= 97) & (x <= 122)) {
        ;;     x = (x + d + 7) % 26 + 97;
        ;; }
        if ((x >= 65) & (x <= 122)) {
            x = f(x);
        }
        b~store_uint(x, 8);
    }
    if (s.slice_refs_empty?()) {
        return b;
    }
    return b.store_ref(store_caesar(s.preload_ref().begin_parse()).end_cell());
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    help((shift + 52) % 26);
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32)))
    .end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    help((52 - shift) % 26);
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32)))
    .end_cell();
}