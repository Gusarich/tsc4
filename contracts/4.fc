{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

int tlen(tuple t) asm "TLEN";
(tuple, (builder)) tpop(tuple t) asm "TPOP";
forall X -> X last(tuple) asm "LAST";

(builder) store_caesar(builder b, slice s, int shift) {
    repeat (s.slice_bits() / 8) {
        int x = s~load_uint(8);
        if ((x >= 65) & (x <= 90)) {
            x = (x + shift + 13) % 26 + 65;
        } elseif ((x >= 97) & (x <= 122)) {
            x = (x + shift + 7) % 26 + 97;
        }
        b~store_uint(x, 8);
    }
    if (s.slice_refs() > 0) {
        cell c = store_caesar(begin_cell(), s~load_ref().begin_parse(), shift).end_cell();
        b = b.store_ref(c);
    }
    return b;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    slice s = text.begin_parse();
    s~load_uint(32);
    builder b = store_caesar(begin_cell(), s, shift);
    return begin_cell().store_uint(0, 32).store_builder(b).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    slice s = text.begin_parse();
    s~load_uint(32);
    builder b = store_caesar(begin_cell(), s, - shift);
    return begin_cell().store_uint(0, 32).store_builder(b).end_cell();
}

