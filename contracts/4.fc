{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption andecryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encryptein a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters anthe last ASCII
  character shoulgo to the beginning. Return new text encodein cell.
-}

() recv_internal() {
}

builder encrypt(int, slice) asm """
    // d s
    SWAP // s d
    1 SETGLOB // s d
    DUP // s s
    SDEPTH // s sd
    REPEAT:<{
        LDREFRTOS // ... s
    }>
    // s0 s1 ... sn

    NEWC // ... b
    SWAP // ... b s
    DUP // ... b s s
    SBITS // ... b s sb
    3 RSHIFT# // ... b s sb/8
    REPEAT:<{
        // ... b s
        8 LDU // ... b x s
        SWAP // ... b s x
        DUP // ... b s x x
        31 PUSHINT // ... b s x x 31
        AND // ... b s x x
        DEC // ... b s x x
        1 GETGLOB // ... b s x x d
        ADD // ... b s x x
        26 PUSHINT // ... b s x x 26
        MOD // ... b s x x
        65 ADDCONST // ... b s x x
        SWAP // ... b s x x
        32 PUSHINT // ... b s x x 32
        AND // ... b s x x
        OR // ... b s x
        ROT // ... s x b
        8 STU // ... s b
        SWAP // ... b s
    }>
    // ... b s
    DROP // ... b
    DEPTH // ... b n+1
    DEC // ... b n
    REPEAT:<{
        // ... b
        ENDC // ... c
        NEWC // ... c b
        STREF // ... b
        SWAP // ... b s
        DUP // ... b s s
        SBITS // ... b s sb
        3 RSHIFT# // ... b s sb/8
        REPEAT:<{
            // ... b s
            8 LDU // ... b x s
            SWAP // ... b s x
            DUP // ... b s x x
            31 PUSHINT // ... b s x x 31
            AND // ... b s x x
            DEC // ... b s x x
            1 GETGLOB // ... b s x x d
            ADD // ... b s x x
            26 PUSHINT // ... b s x x 26
            MOD // ... b s x x
            65 ADDCONST // ... b s x x
            SWAP // ... b s x x
            32 PUSHINT // ... b s x x 32
            AND // ... b s x x
            OR // ... b s x
            ROT // ... s x b
            8 STU // ... s b
            SWAP // ... b s
        }>
        // ... b s
        DROP // ... b
    }>
    // b
""";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    builder b = encrypt(shift % 26, text.begin_parse().skip_bits(32));
    return begin_cell().store_uint(0, 32).store_builder(b).end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    builder b = encrypt((26 - shift) % 26, text.begin_parse().skip_bits(32));
    return begin_cell().store_uint(0, 32).store_builder(b).end_cell();
}