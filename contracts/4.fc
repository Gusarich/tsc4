{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption andecryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encryptein a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters anthe last ASCII
  character shoulgo to the beginning. Return new text encodein cell.
-}

forall X -> X tpop(tuple) asm "TPOP";
int tlen(tuple) asm "TLEN";

() recv_internal() {
}

(builder) store_caesar(slice s, int d) {
    tuple t = empty_tuple();
    repeat (s.slice_depth()) {
        builder b = begin_cell();
        repeat (s.slice_bits() / 8) {
            int x = s~load_uint(8);
            if ((x >= 65) & (x <= 90)) {
                x = (x + d + 13) % 26 + 65;
            } elseif ((x >= 97) & (x <= 122)) {
                x = (x + d + 7) % 26 + 97;
            }
            b~store_uint(x, 8);
        }
        t~tpush(b);
        s = s.preload_ref().begin_parse();
    }
    builder b = begin_cell();
    repeat (s.slice_bits() / 8) {
        int x = s~load_uint(8);
        if ((x >= 65) & (x <= 90)) {
            x = (x + d + 13) % 26 + 65;
        } elseif ((x >= 97) & (x <= 122)) {
            x = (x + d + 7) % 26 + 97;
        }
        b~store_uint(x, 8);
    }
    t~tpush(b);
    builder b = t~tpop();
    repeat (t.tlen()) {
        b = (t~tpop()).store_ref(b.end_cell());
    }
    return b;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32), shift))
    .end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32), - shift))
    .end_cell();
}