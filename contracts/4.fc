{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption andecryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encryptein a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters anthe last ASCII
  character shoulgo to the beginning. Return new text encodein cell.
-}

() recv_internal() {
}

(builder) store_caesar(slice s, int d) asm """
    // s d
    DUP // s d d
    13 ADDCONST // s d d+13
    1 SETGLOB // s d
    7 ADDCONST // s d+7
    2 SETGLOB // s
    NEWC // s b
    SWAP // b s
    AGAINBRK:<{
        // b s
        DUP // b s s
        SBITS // b s sl
        3 RSHIFT# // b s sl/8
        REPEAT:<{
            // b s
            8 LDU // b x s
            SWAP // b s x
            DUP // b s x x
            65 GEQINT // b s x ?
            OVER // b s x ? x
            90 LEQINT // b s x ? ?
            AND // b s x ?
            IF:<{
                // 65-90
                // b s x
                1 GETGLOB
                ADD
                26 PUSHINT
                MOD
                65 ADDCONST
            }>ELSE<{
                DUP // b s x x
                97 GEQINT // b s x ?
                OVER // b s x ? x
                122 LEQINT // b s x ? ?
                AND // b s x ?
                IF:<{
                    // 97-122
                    // b s x
                    2 GETGLOB
                    ADD
                    26 PUSHINT
                    MOD
                    97 ADDCONST
                }>
            }>
            // b s x
            ROT // s x b
            8 STU // s b
            SWAP // b s
        }>
        // b s
        DUP // b s s
        SREFS // b s sr
        ISPOS // b s ?
        IFNOTRETALT // b s
        LDREFRTOS // b s s'
        NIP // b s'
        NEWC // b s' b1
        SWAP // b b1 s'
    }>

    DROP // ... b1 b2 b3
    DEPTH // ... b1 b2 b3 n
    -2 ADDCONST
    REPEAT:<{
        ENDC // ... b1 b2 c3
        SWAP // ... b1 c3 b2
        STREF // ... b1 b2
    }>
""";

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32), shift))
    .end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32), - shift))
    .end_cell();
}