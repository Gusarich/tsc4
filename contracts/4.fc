{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption andecryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encryptein a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters anthe last ASCII
  character shoulgo to the beginning. Return new text encodein cell.
-}

forall X -> X tpop(tuple) asm "TPOP";
int tlen(tuple) asm "TLEN";

global d1;
global d2;

() recv_internal() {
}

int apply_caesar(int x) inline {
    if ((x >= 65) & (x <= 90)) {
        return (x + d1) % 26 + 65;
    } elseif ((x >= 97) & (x <= 122)) {
        return (x + d2) % 26 + 97;
    }
    return x;
}

(builder) store_caesar(slice s, int d) {
    d1 = d + 13;
    d2 = d + 7;

    tuple t = null();
    int slicedepth = s.slice_depth();
    repeat (slicedepth) {
        builder b = begin_cell();
        repeat (s.slice_bits() / 8) {
            b~store_uint(apply_caesar(s~load_uint(8)), 8);
        }
        t = cons(b, t);
        s = s.preload_ref().begin_parse();
    }
    builder b = begin_cell();
    repeat (s.slice_bits() / 8) {
        b~store_uint(apply_caesar(s~load_uint(8)), 8);
    }
    t = cons(b, t);
    builder b = t~list_next();
    repeat (slicedepth) {
        b = (t~list_next()).store_ref(b.end_cell());
    }
    return b;
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32), shift))
    .end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
    return begin_cell()
        .store_uint(0, 32)
        .store_builder(store_caesar(text.begin_parse().skip_bits(32), - shift))
    .end_cell();
}